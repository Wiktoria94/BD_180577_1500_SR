zestaw 1
Zadanie 1
1.CREATE TABLE postac (id_postaci INT AUTO_INCREMENT PRIMARY KEY, nazwa VARCHAR(40), rodzaj ENUM('wiking', 'ptak', 'kobieta'), data_ur DATE, wiek INT UNSIGNED);
2.INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES ('Bjorn', 'wiking', '1980-01-01', 45), ('Drozd', 'ptak', '2010-05-15', 15), ('Tesciowa', 'kobieta', '1940-02-20', 80);
3.UPDATE postac SET wiek = 88 WHERE nazwa = 'Tesciowa';
Zadanie 2
CREATE TABLE walizka (id_walizki INT AUTO_INCREMENT PRIMARY KEY, pojemnosc INT UNSIGNED, kolor ENUM('różowy', 'czerwony', 'tęczowy', 'żółty') DEFAULT 'różowy', id_wlasciciela INT, FOREIGN KEY (id_wlasciciela) REFERENCES postac(id_postaci) ON DELETE CASCADE);
INSERT INTO walizka (pojemnosc, id_wlasciciela) VALUES (50, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn')), (60, (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));
Zadanie 3
CREATE TABLE izba (adres_budynku VARCHAR(50), nazwa_izby VARCHAR(50), metraz INT UNSIGNED, wlasciciel INT, PRIMARY KEY (adres_budynku, nazwa_izby), FOREIGN KEY (wlasciciel) REFERENCES postac(id_postaci) ON DELETE SET NULL);
ALTER TABLE izba ADD kolor ENUM('czarny', 'biały', 'zielony', 'czerwony') DEFAULT 'czarny' AFTER metraz;
INSERT INTO izba (adres_budynku, nazwa_izby, metraz, wlasciciel) VALUES ('Wikingowa', 'spiżarnia', 15, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'));
Zadanie 4
CREATE TABLE przetwory (id_przetworu INT AUTO_INCREMENT PRIMARY KEY, rok_produkcji YEAR DEFAULT 1654, id_wykonawcy INT, zawartosc VARCHAR(100), dodatek VARCHAR(100) DEFAULT 'papryczka chilli', id_konsumenta INT, FOREIGN KEY (id_wykonawcy) REFERENCES postac(id_postaci), FOREIGN KEY (id_konsumenta) REFERENCES postac(id_postaci));
INSERT INTO przetwory (id_wykonawcy, zawartosc, id_konsumenta) VALUES ((SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'), 'bigos', (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));
Zadanie 5
INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES ('Wiking1', 'wiking', '1990-04-05', 35), ('Wiking2', 'wiking', '1988-06-22', 37), ('Wiking3', 'wiking', '1992-08-15', 33), ('Wiking4', 'wiking', '1985-12-10', 40), ('Wiking5', 'wiking', '1980-02-28', 45);
CREATE TABLE statek (nazwa_statku VARCHAR(50) PRIMARY KEY, rodzaj_statku ENUM('longship', 'drakkar', 'knarr'), data_wodowania DATE, max_ladownosc INT UNSIGNED);
INSERT INTO statek (nazwa_statku, rodzaj_statku, data_wodowania, max_ladownosc) VALUES ('Drakkar1', 'longship', '1050-07-12', 200), ('Drakkar2', 'knarr', '1060-08-14', 150);
ALTER TABLE postac ADD funkcja VARCHAR(50);
UPDATE postac SET funkcja = 'kapitan' WHERE nazwa = 'Bjorn';
ALTER TABLE postac ADD id_statku VARCHAR(50), ADD FOREIGN KEY (id_statku) REFERENCES statek(nazwa_statku);
UPDATE postac SET id_statku = 'Drakkar1' WHERE nazwa = 'Bjorn';
UPDATE postac SET id_statku = 'Drakkar2' WHERE nazwa = 'Tesciowa';
DELETE FROM izba WHERE nazwa_izby = 'spiżarnia';
DROP TABLE izba;

zestaw 2
Zadanie 1
a) DELETE FROM postac WHERE id_postaci IN (SELECT id_postaci FROM postac WHERE nazwa != 'Bjorn' ORDER BY wiek DESC LIMIT 2);
b) ALTER TABLE postac DROP PRIMARY KEY;
Zadanie 2
a) ALTER TABLE postac ADD COLUMN pesel CHAR(11) PRIMARY KEY;
b) ALTER TABLE postac MODIFY COLUMN rodzaj ENUM('wiking', 'ptak', 'kobieta', 'syrena');
c) INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES ('Gertruda Nieszczera', 'syrena', '1990-06-15', 30);
Zadanie 3
a) UPDATE postac SET id_statku = (SELECT nazwa_statku FROM statek WHERE nazwa_statku = 'Lodowy Wiking') WHERE nazwa LIKE '%a%';
b) UPDATE statek SET max_ladownosc = max_ladownosc * 0.7 WHERE YEAR(data_wodowania) BETWEEN 1901 AND 2000;
c) SELECT * FROM postac WHERE wiek <= 1000;
Zadanie 4
a) INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES ('Loko', 'wąż', '1985-03-01', 40);
b) CREATE TABLE Marynarz AS SELECT * FROM postac WHERE id_statku IS NOT NULL;
c) ALTER TABLE Marynarz ADD PRIMARY KEY (id_postaci); ALTER TABLE Marynarz ADD FOREIGN KEY (id_statku) REFERENCES statek(nazwa_statku);
Zadanie 5
a) UPDATE postac SET id_statku = NULL;
b) DELETE FROM postac WHERE rodzaj = 'wiking' LIMIT 1;
c) DELETE FROM statek;
d) DROP TABLE statek;
e) CREATE TABLE zwierz (id INT AUTO_INCREMENT PRIMARY KEY, nazwa VARCHAR(100), wiek INT);
f) INSERT INTO zwierz (nazwa, wiek) SELECT nazwa, wiek FROM postac WHERE rodzaj = 'ptak' OR rodzaj = 'wąż' OR rodzaj = 'syrena';

zestaw 3
Zadanie 1
CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura; 2. CREATE TABLE zasob AS SELECT * FROM wikingowie.zasob; 3. CREATE TABLE ekwipunek AS SELECT * FROM wikingowie.ekwipunek; 4. SELECT * FROM zasob;
SELECT * FROM zasob WHERE typ = 'jedzenie';
SELECT idZasobu, ilosc FROM kreatura WHERE id IN (1, 3, 5);
Zadanie 2
SELECT * FROM kreatura WHERE rodzaj != 'wiedźma' AND waga >= 50;
SELECT * FROM zasob WHERE waga BETWEEN 2 AND 5;
SELECT * FROM kreatura WHERE nazwa LIKE '%or%' AND waga BETWEEN 30 AND 70;
Zadanie 3
SELECT * FROM zasob WHERE MONTH(data_pozyskania) IN (7, 8);
SELECT * FROM zasob ORDER BY waga ASC;
SELECT * FROM kreatura ORDER BY wiek DESC LIMIT 5;
Zadanie 4
SELECT DISTINCT rodzaj FROM zasob;
SELECT CONCAT(nazwa, ' - ', rodzaj) FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, (ilosc * waga) AS calkowita_waga FROM zasob WHERE YEAR(data_pozyskania) BETWEEN 2000 AND 2007;
Zadanie 5
SELECT (ilosc * waga) * 0.7 AS masa_netto, (ilosc * waga) * 0.3 AS odpady FROM zasob WHERE typ = 'jedzenie';
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT DISTINCT rodzaj FROM zasob WHERE (nazwa LIKE 'Ba%' OR nazwa LIKE '%os') ORDER BY nazwa;


zestaw 4
1) 1.SELECT AVG(waga) srednia_waga_wikingow from kreatura;
  2.SELECT AVG(waga) AS srednia_waga, COUNT(*) AS liczba_kreatur from kreatury GROUP BY rodzaj;
  3.SELECT rodzaj, AVG(YEAR(CURDATE()) - YEAR(dataUr)) AS sredni_wiek FROM kreatura GROUP BY rodzaj;
2) 1.SELECT rodzaj, SUM(waga) AS suma_wag FROM zasobb GROUP BY rodzaj;
  2.SELECT rodzaj, AVG(waga) AS srednia_waga FROM zasobb GROUP BY rodzaj  HAVING COUNT(*) >=4 AND AVG(waga) > 10;
  3.SELECT rodzaj, COUNT(DISTINCT nazwa) AS liczba_nazwy FROM zasobb GROUP BY rodzaj HAVING COUNT(*) > 1;
3) 1.SELECT k.nazwa, SUM(z.ilosc) AS ilosc_zasobow FROM kreatura k, ekwipunek e, zasobb z WHERE k.idKreatury AND z.idZasobu GROUP BY k.nazwa;
  2.SELECT k.nazwa, z.nazwa FROM kreatura k, ekwipunek e, zasobb z WHERE k.idKreatury = e.idKreatury AND e.idzasobu = z.idzasobu;
  3.SELECT kreatura.nazwa FROM kreatura LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury WHERE ekwipunek.idKreatury IS NULL;
4) 1.s SELECT k.nazwa, z.nazwa FROM kreatura k INNER JOIN ekwipunek e ON k.idKreatury = e.idkreatury INNER JOIN zasobb z on e.idzasobu=z.idzasobu WHERE k.rodzaj = 'wiking' and k.dataUr between "1670-01-01" and "1680-01-01";
  2.select k.nazwa from  kreatura k inner join ekwipunek e on k.idkreatury=e.idkreatury inner join zasob z on e.idzasobu=z.idzasobu where z.rodzaj='jedzenie'  order by k.dataUr ASC limit 5;
  3.select k1.nazwa as nazwa1, k2.nazwa as nazwa2 from kreatura k1 join kreatura k2 on k1.idkreatury=k2.idkreatury +5;
5) 1.select k.rodzaj , avg(z.waga) as srednia_waga from kreatura k inner join ekwipunek e on k.idkreatury = e.idkreatury inner join zasobb z on e.idzasobu = z.idzasobu where k.rodzaj !='malpa' or 'waz' and
e.ilosc<30 group by k.rodzaj;

zestaw 5
1.1
insert into bednarska.kreatura select*from wikingowie.kreatura;
create table uczestnicy as select*from wikingowie.uczestnicy;
create table etapy_wyprawy as select*from wikingowie.etapy_wyprawy;
create table sektor as select*from wikingowie.sektor; create table wyprawa as select*from wikingowie.wyprawa;
1.2
 select k.nazwa from kreatura k left join uczestnicy u on k.idkreatury=u.id_uczestnika where u.id_wyprawy is null;
select w.nazwa, e.idEtapu, w.data_rozpoczecia, s.nazwa from wyprawa w inner join etapy_wyprawy e on w.id_wyprawy=e.idWyprawy inner join sektor s on s.id_sektora=etapy_w.sektor order by w.data_rozpoczecia, e.kolejnosc;
1.3
 select w.nazwa, sum(e.ilosc) from kreatura k inner join uczestnicy u on k.idkreatury=u.id_uczestnika inner join wyprawa w on u.id_wyprawy=w.id_wyprawy inner join ekwipunek e on e.idkreatury=k.idkreatury group by w.nazwaselect w.nazwa, count(k.nazwa) as ilosc_uczestnikow, group_concat(k.nazwa separator ', ') from wyprawa w inner join uczestnicy u on w.id_wyprawy=u.id_wyprawy inner join kreatura k on k.idKreatury=u.id_uczestnika group by w.nazwa;
select k.nazwa, case when count(u.id_wyprawy) > 0 then 'bral udzial w wyprawie' else 'nie bral udzialu w wyprawie' end as status from kreatura k left join uczestnicy u on u.id_uczestnika=k.idKreatury group by k.nazwa;
1.4select w.nazwa, sum(length(e.dziennik)) as dlugosc from etapy_wyprawy e left join wyprawa w on w.id_wyprawy=e.idWyprawy group by w.nazwa having (dlugosc)<400;
select w.nazwa, avg(z.waga*z.ilosc)/count(distinct u.id_uczestnika) as sr_waga from wyprawa w join uczestnicy u on w.id_wyprawy=u.id_wyprawy join ekwipunek e on u.id_uczestnika=e.idKreatury join zasob z on e.idZasobu=z.idZasobu group by w.id_wyprawy, w.nazwa;
1.5
select w.nazwa, concat(k.nazwa) as imie, datediff(w.data_rozpoczecia, k.dataUr) as wiek from wyprawa w inner join uczestnicy u on w.id_wyprawy=u.id_wyprawy inner join kreatura k on k.idKreatury=u.id_uczestnika inner join etapy_wyprawy e on w.id_wyprawy=e.idWyprawy where e.sektor=7 GROUP BY w.nazwa, k.nazwa, wiek;
